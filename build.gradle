import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'com.gorylenko.gradle-git-properties' version '2.2.2'
    id 'io.freefair.lombok' version '5.1.0'

    // jfx
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'

    id 'org.beryx.jlink' version '2.19.0'
}

repositories {
    mavenCentral()
}
dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.11'
}

jar.exclude('images/icon.svg')
jar.exclude('images/icon64.ico')

gitProperties {
    keys = ['git.branch',
            'git.closest.tag.commit.count',
            'git.closest.tag.name',
            'git.commit.id',
            'git.commit.id.abbrev',
            'git.commit.id.describe',
            'git.commit.time']
    customProperty('build.time', OffsetDateTime.now().truncatedTo(ChronoUnit.SECONDS).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME))
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

javafx {
    version = '14.0.1'
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

// build:build creates a zip with all required dependencies in "build/distributions"
application {
    mainModule = 'net.teatwig.mineswraft'
    mainClass = 'net.teatwig.mineswraft.MainFX'
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--dirty'
        standardOutput = stdout
        ignoreExitValue = true
    }
    def version = stdout.toString().trim()
    if(version.isEmpty()) {
        "DEV"
    } else {
        version.replaceFirst("^v", "");
    }
}
def versionedProjectName = "$rootProject.name-" + getVersionName()

distributions {
    main {
        distributionBaseName = "$versionedProjectName-java"
    }
}

// build:jlink/jlinkZip creates a zip containing everything and a JRE, so it should be able to run on systems that don't have java installed
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = "$rootProject.name"
    }
    imageName = "$versionedProjectName-rt"
}
