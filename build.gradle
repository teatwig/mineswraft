buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.4.1'
    }
}

plugins {
    id 'java'
    id 'idea'
    id "edu.sc.seis.launch4j" version "1.6.1"
}
apply plugin: 'javafx-gradle-plugin'

repositories {
    mavenCentral()
}
dependencies {
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.8'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
        ignoreExitValue = true
    }
    def version = stdout.toString().trim()
    if(version.isEmpty()) {
        "DEV"
    } else {
        version.replaceFirst("^v", "");
    }
}

def branch = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'symbolic-ref', '--short', '-q', 'HEAD'
        standardOutput = stdout
        ignoreExitValue = true
    }
    String branch = stdout.toString().trim()
    println "Branch is "+branch
    if(branch.equals("master")) {
        return ""
    } else {
        return branch+"-"
    }
}

def fileName = "$rootProject.name-"+branch()+getVersionName()

jar.exclude('images/icon.svg')
jar.exclude('images/icon64.ico')

jfx {
    println "Filename is $fileName"
    verbose = true
    mainClass 'net.teatwig.mineswraft.MainFX'
    jfxMainAppJarName = "${fileName}.jar"

    manifestAttributes = ['Implementation-Version': getVersionName()]

}

launch4j {
    jar = "$buildDir/jfx/app/${fileName}.jar"
    outfile = "${fileName}.exe"
    jreMinVersion = '1.8.0'
    icon = "$rootDir/src/main/resources/images/icon64.ico"
}

/*
 * Executes jfx before launch4j
 */
tasks.whenTaskAdded { task ->
    if(task.name.equals("createExeWithJar")) {
        task.dependsOn(jfxJar)
    }
}
